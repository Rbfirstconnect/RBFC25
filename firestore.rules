rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        (
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
          request.auth.token.email == 'Rbfcyoungstown@gmail.com'
        );
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Rules for lookupHistory collection
    match /lookupHistory/{document} {
      // Allow read if user is admin or owns the document
      allow read: if isAuthenticated() || request.auth != null;
      
      // Allow create if user is authenticated and sets themselves as owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
        
      // Allow update/delete if user is admin
      allow update, delete: if isAdmin();
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated() || 
        (request.auth != null && (userId == request.auth.uid || request.auth.token.email == 'Rbfcyoungstown@gmail.com'));
      
      // Allow updates by admins or the user themselves
      allow update: if isAdmin() || isOwner(userId);
    }
  }
}